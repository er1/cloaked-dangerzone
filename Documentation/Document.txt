SOEN 6441/1 Collaborative Email Client
=====================================

Inital Phase Development
------------------------
 * Compose New Email.
 * Save Draft Email.
 * Display Your inbox folder hierarchy.
 * Create Sub folders.
 * Move mail to sub folders.
 * Have a send mail functionality that moves email to a Sent and ToSend folder.
 * All functionalities should have menu, right mouse click and hot keys.
 * Delete an email from folders.
 * Delete folders except top level inbox.

Phase II Development
---------------------
 * Email Templates.
 * Email Search display only email in your inbox that meet a filter criteria.
 * Email filters that move emails into a specification inbox folder that match search criteria periodically.
 * Create a new Meeting with other email attendees create email informing them.
 * Edit an Meeting.
 * Delete a Meeting.

Phase III Development:
-----------------------
 * Send and Receive over Internet.
 * Mail transfer between three mail Clients.
 * Meeting accept and decline created for meeting msg between the clients over network.
 * Email Client is changed to handle and concurrently edit,an meeting for multiple user over a network using optismistic locking.

### Project Details

- Language: Java
- Libraries: Swing
- Development Environment: Net Beans 7.3 w/ EMMA
- Server : Stock Mail Servers(Postfix and Devacot)
- Protocols SMTP for outgoing mails and POP3 for incoming mails

### Architecture

The Email Client project is broken up into three main layers or packages
- `Persist` for the backing date storage on the filesystem
- `Email` for the domain level handling of Messages and their corresponding mailbox
- `ui` and `ui.*` for the user interface.
- `ui.SwingMeeting` and `ui.SwingRules` for meeting and Rule.
- Templates are an advanced version of Compose mail. 
- Search is use File Storage for finding mails.
- Send and Receive mails over the Network using Stock Mail Servers.
- Meeting Acceptance and Decline over network.
- Resolving multiple user meeting conflinct using optimistic locking.

![Use case Diagram](UseCases/Main/user.png "Architecture ")
![Use case Diagram](UseCases/Main/SRNetwork.png "Architecture ")

 
#### Persist
Persist provides objects to create, move, delete and otherwise manage files in the filesystem with no notion of how Messages work higher up.


#### Email
>Email contains most of the work for handling messages such as accessing Persist for storage and maps concepts such as Emails and Folders to Objects such as `Message` and `Folder`.
>Each of these objects are then extended to objects such as `FileSystemFolder` and `PlainTextMessage` to represent these objects given that they will be stored via `Persist` `Message`s and `Folder`s are contains by a `Mailbox` which is extended to work with `Persist` via `FileSystemMailbox`.
>The `Email` Package also provides `MessageController` which provides access to a `Mailbox` by a higher level, this object is the only point of interaction needed for a higher level.
>`MessageController` is implemented as a Singleton so that this object does not need to be passed around to all other higher level objects but can be accessed when needed.
>This imposes a restriction that only one Mailbox can be used per instance of the application.

#### User Interface
`ui.*` accesses `MessageController` to provide Swing widgets for the application.


### Protocols

>We elected to use the standard set out by RFC #822 as our means of storing our  messages. While this is an older standard that has been superceded, new versions remain backward compatible. 
This allowed us to store messages in a standards compliant way while avoiding implenting additional features from newer versions.Following this standards affords us the possibility to use existing mail protocols with minimal effort.

#### Example

Here is an example of an RFC #822

	Date:     26 Aug 76 1429 EDT
	To:       Smith@Registry.Org
	From:     Jones@Registry.Org
	
	This is a sample message

Messages are plaintext messages broken down into two parts: a header and a message body.

The header is a series of key value pairs one per line with the first colon delimiting the key from the value. Lines are defined has having a new line character optionally preceded by a cariage return (i.e. regex /\r?\n/). At the end of the header is one empty line marking the end of the header.
The message body is every character following the empty line after the header and should be taken verbatim.
Future standards define formats for the message body to allow attachments and html formatting however that is beyond the scope of this document and application.

At this time, the application does not have network support but with minimal effort SMTP can be implemented for sending outbound messages in the real world and POP3 can potentially be used to get mail from a mail server.

SMTP can be achived by opening a socket to a compliant server and sending something similar to the following:

	HELO <myhostname>
	MAIL FROM:<myaddress>
	RCPT TO:<a destination>
	RCPT TO:<another destination as many times as needed>
	DATA
	<the RFC 822 compliant message>
	.
	QUIT

This doesnt care for errors but is minimal enough to just work.

### Servers:
>Postfix is a free and open-source mail transfer agent (MTA) that routes and delivers electronic mail, intended as an alternative to the widely used Sendmail MTA. When have used postfix server for the mail transefer over network.
- We have elected to use standard protocols for our email client because our original design decision to make all our messages rfc822 and rfc2822 compliant allowed us to use protocols that depended on these standards such as POP3 and SMTP.
- We use SMTP as our means of sending messages to a compliant server and we expect messages in the mailbox on a potentially different server with POP3. 
- This allows us to use our client with other internet servers. we did not implement connection encryption and as such we had to use a custom configured server.
- We deployed our server on a virtual machine running Ubuntu Lucid with the stock mail servers Postfix for SMTP and Dovecot for POP3.
- Postfix was configured only to allow local unencrypted mail (so the SSL requirement was removed) and Dovecot was configured to allow plain-text passwords on unencrypted links.Given that these are only encryption requirements.
- Our architechture allows us to drop in a secure socket (or any other socket that may potentially use these protocols) in place of the standard unencrypted socket.
- If a secure socket were implemented, this implementation would then work with real world servers such as gmail, live mail, and other common mail providers.


### Initail GUI

Email Client ID gui gets userID from the user to create a new Email client for the particular user.
![Use case Diagram](UseCases/Usecase/EmailClient.png "Persistent Storage ")

- Email client window appears by the user ID
    - If the userID is new, then new window is created with USER folder on the top and Inbox, Outbox, Sent and Trash as the second level of the folder layer which cannot be deleted or changed by th user.
    - When the userID is old then the respective folders and messages of the user is retrieved from the persistent storage system.

#### Compose a New Mail
Compose Mail Window is a common window created from Send New Mail, Reply To Mail and Forward Mail. Where the compose mail window act accordingly.

### Templates:

Templates are an advancement of the compose mail part, where the user creates a new mail and stores it as templates for his feature use.
> User can edit , delete and add templates 
> We have implemented it by extending the class of compose mail, so that it reduse a effort of creating a new class for it.

#### Send New Mail
 - When user click send mail either in toolbar or using Hotkey, sendmail event is created which intialize compose mail window 
 - Send mail gets input from the user using compose mail window, move the mail to send folder in the tree bar.
 - Save or Delete mail event enable the user to send request either to move the mail to the drafts folder or trash folder and finally updates the tree bar
 - Sequence Diagram for the send mail

![Sequence Diagram](UseCases/SD%20Images/SendMail.png "Sequence Diagram")
   
#### Reply To Mail
 - When user click Reply mail either in toolbar or using Hotkey, ReplyMail event is created which intialize compose mail window with prefilled from, to, subject and body of the mail 
 - Reply mail gets input from the user using compose mail window, move the mail to send folder in the tree bar.
 - Save or Delete mail event enable the user to send request either to move the mail to the drafts folder or trash folder and finally updates the tree bar.
 - Sequence Diagram for the Reply mail 

![Sequence Diagram](UseCases/SD%20Images/replyMail.png  "Sequence Diagram")
   
#### Forward Mail
 - When user click Forward mail either in toolbar or using Hotkey, ForwardMail event is created which intialize compose mail window with prefilled from, subject and body of the mail 
 - User has to fill in the to text field, to send the mail to the particular user 
 - Reply mail gets input from the user using compose mail window, move the mail to send folder in the tree bar.
 - Save or Delete mail event enable the user to send request either to move the mail to the drafts folder or trash folder and finally updates the tree bar.
 - Sequence Diagram for the send mail 

![Sequence Diagram](UseCases/SD%20Images/ForwardMail.png "Sequence Diagram")
    
### Folder Options
User are provided with various kinds of folder options and also restrictions, 

#### Creating
Users are allow to create new folder inside only inbox. Not on other top level folders. 

#### Deleting
Users are allow to delete only the mails and sub level folders in their tree bar.

#### Re-Naming
Users are only allowed to rename their sub folders.
     
 - Folder Option:
   - Add Folder 
   - Delete Folder
   - Move Folder
   - Move Mails to folder

#### Create New Folder:
Users are allowed to create new folder only inside INBOX, and this create event enables the user access options like move mail, move folder options.

![Sequence Diagram](UseCases/SD%20Images/createNewFolder.png "Create New Folder Sequence Diagram")

##### Add Folder 
Add folder event (other version of Create new folder) is enabled only inside INBOX and its sub-Folders, the seuence diagram for the add folder event follows

#### Move Folder
Move folder event allows the user to move the mails across the folders and subfolders inside the INBOX, the sequence diagram of the Move folder follows. 

![alt type](UseCases/SD%20Images/MoveselectFolder.png "MoveFolder Sequence Diagram")

#### Delete Folder

Delete event is enabled only inside the toplevel folders , you can delete folders and mails inside th folders. Depending upon the reply from the user delete folder event has two action one which deletes only the folder and moves the mail to the parent folder. Other action deletes entire folder with mails inside it.
  - Sequence diagram for the delete folder is as follows

![screen shot](UseCases/SD%20Images/deleteFolder.png "Delete Folder Sequence Diagram")

### Dispaly Folder In Hiearchy:

Dispaly folder event uptades the hiearchy in the Jtree, when ever events regarding the folder event like, Move Folder, Deleted Folder and Add folder.   
Deleteing mails also leads to the update in the Jtree but displayed in the JText box created in the display event.

![Screen Shot](UseCases/SD%20Images/updateFolder.png "Update Folder")

### Right Click And Hot Keys:

Right Click Event is enabled for all events in the GUI, 

| ToolBar        | Hot Key       |
| -------------  |:-------------:|
| Compose Mail   | Alt + N       | 
| Reply Mail     | Alt + R       | 
| Delete Mail    | Alt + D       | 
| Forward Mail   | Alt + F       | 
| Refresh Mail   | F5            |      

### Meeting :
> Meeting is a features which is been added to the phase 2 of project, by creating a new class which extends the summary class of the Message List.  So that, we can get the controller class to send the msg between users involved in the meeting. By using the send and receive mail.
- We have created the meeting in such a way that the user gets the mail directly to his meeting folder, which is easy for identification.
- User are allowed to create, edit and delete meeting .
- Validation like checking date and time is done
- We extended Messages to represent meetings.
- A meeting is a special kind of Message. It adds the Start and End Time, and Meeting Date.
- We also kept the ID of the message consistent across all mailboxes to ensure updates/accepts/declines to meetings would reflect to all recipients.

By using the date modified tag to keep track of latest update, in the future we could reject incoming changes that are done to an out of date meeting.

###Accept and Decline:
> Meeting we have create accept and decline feature. Here we have extended old meeting feature , where we have added acceptance by using simple acknowledgement fuctions for the sender and back to receiver. When the person in the meeting declines it the fuctions automatically delets him from the meeting.
The meeting window has a added lable filed to GUI where all the persons know who accepted and declined the meeting are displayed for better user interface.
> We have handled the collison between same meeting edited by multiple user by using the same acknowledgement protocol between different user. When a meeting is edited then header of the meeting is updated as edited and then it is sent to all the user, 
##Different Cases:
 - when everyone accepts the meeting then it will get updated to all the user.
 - If any one of the user rejects edited meeting then the decline request is sent to the user who edited and nessary changes are made. Which again goes through all the process for the user acceptance.
 - If everyove rejected the update the meeting is restroed to its old form.

###Optimistic Locking:
> When one or more user tries to edit meeting, here we need optimistic locking. Here we have tried to implement the optimistic locking by the procedure showing the Sequence diagram.
This feature works by sending and receving acknowledgement form user to user, this gets updated into a stack where the first uptade done is send to all the user and the need changed are done accordingly and then the second and so on

![screen shot](UseCases/SD%20Images/SendRecieveSD.png "Optimistic Locking Sequence Diagram")

### Filters :
> Filter allows the user to make the new mails redirected to a folder depending on the rules he wants. 
- Filters are created by making use of the indoxID obtained from the controller , where the incoming mails are made observable and redirected directly to the folders according to the rule.
- We have made the filters in such a way that when a rule is getting create and applied it not only makes changes to the incoming messages but also to the mails inside the inbox
- Users are allowed to create , delete and edit  filters.

### Search Mail:
> Search mail is created by using class which extends folder table Model  where we have implemented JTree which helps in displaying the mails to the user through the GUI application. 
- We made the class in view so the class has a control over the message class, Where we can access the mails from the persistent storage through a facade which has been created for the view.
- Search mail search for text throughout  persistent  storage and stores the matching mail to a array, which display it to the user though JTable in the Main Window.




      

